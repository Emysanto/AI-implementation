import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque
import numpy as np

def bfs_maze_solver(maze, start, goal):
    rows, cols = len(maze), len(maze[0])
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up
    queue = deque([(start, [start])])  # (current position, path taken)
    visited = set()
    
    while queue:
        (x, y), path = queue.popleft()
        
        if (x, y) == goal:
            return path  # Return the shortest path
        
        if (x, y) in visited:
            continue
        
        visited.add((x, y))
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0:
                queue.append(((nx, ny), path + [(nx, ny)]))
    return None  # No path found
def animate_maze(maze, path):
    fig, ax = plt.subplots()
    maze_array = np.array(maze)
    cmap = plt.cm.binary
    ax.imshow(maze_array, cmap=cmap)
    
    path_x, path_y = zip(*path)
    point, = ax.plot([], [], 'ro', markersize=10)  # Moving point
    
    def update(frame):
         point.set_data([path_y[frame]], [path_x[frame]])  # Pass both as sequences
         return point,
   
    
    ani = animation.FuncAnimation(fig, update, frames=len(path), interval=300, blit=True)
    plt.show()

# Example Maze (0 = open path, 1 = wall)
maze = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)  # Top-left corner
goal = (4, 4)   # Bottom-right corner

path = bfs_maze_solver(maze, start, goal)
if path:
    print("Shortest Path:", path)
    animate_maze(maze, path)
else:
    print("No path found")
